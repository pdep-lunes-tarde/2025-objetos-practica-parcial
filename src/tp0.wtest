import tp.*

const umbrio = new Incorporeo(defensa = 10, pv = 50, elemento = oscuridad)
const nocturnoRojo = new Sincorazon(pv = 80, elemento = fuego)
const rapsodiaAzul = new Sincorazon(pv = 80, elemento = hielo)

describe "Enemigos y ataques" {
	test "Un incorpóreo recibe daño físico igual a la diferencia entre la potencia del ataque y la defensa del enemigo" {
		const ataqueFisico = new AtaqueFisico(potencia = 20)

		umbrio.recibirAtaque(ataqueFisico)

		assert.equals(40, umbrio.pv())
	}

	test "Un ataque físico causa siempre, al menos, 1 de daño" {
		const ataqueFisico = new AtaqueFisico(potencia = 2)

		umbrio.recibirAtaque(ataqueFisico)

		assert.equals(49, umbrio.pv())
	}

	test "Un sincorazón recibe daño físico igual al 90% de la potencia del ataque" {
		const ataqueFisico = new AtaqueFisico(potencia = 10)

		nocturnoRojo.recibirAtaque(ataqueFisico)

		assert.equals(71, nocturnoRojo.pv())
	}

	test "Un enemigo no recibe daño de un ataque mágico de su mismo elemento " {
		const ataqueMagico = new AtaqueMagico(potencia = 100, elemento = fuego)
		const vidaOriginal = nocturnoRojo.pv()
		
		nocturnoRojo.recibirAtaque(ataqueMagico)
		
		assert.equals(nocturnoRojo.pv(), vidaOriginal)
	}

	test "Al ser atacado por un ataque mágico de un elemento neutral, un enemigo recibde daño igual a su potencia" {
		const ataqueMagico = new AtaqueMagico(potencia = 50, elemento = luz)
		
		nocturnoRojo.recibirAtaque(ataqueMagico)
		
		assert.equals(30, nocturnoRojo.pv())
	}

	test "Al ser atacado por un ataque mágico eficaz, un enemigo recibde daño igual al doble de su potencia" {
		const ataqueMagico = new AtaqueMagico(potencia = 10, elemento = luz)
		umbrio.recibirAtaque(ataqueMagico)
		assert.equals(30, umbrio.pv())
	}
}


describe "Héroes" {
  	test "Cuando un héroe ataca a un enemigo, le hace un ataque físico cuya potencia es la fuerza del héroe + el poder de su espada" {
		sora.atacar(umbrio)
		
		assert.equals(47, umbrio.pv())
  	}

	test "Cuando un héroe lanza un hechizo a un enemigo, le hace un ataque mágico cuya potencia es el poder base del hechizo * el poder mágico de su espada y gasta maná igual al poder base" {
		sora.lanzarHechizo(piro, rapsodiaAzul)
		
		assert.equals(30, rapsodiaAzul.pv())
		assert.equals(3, sora.pm())
	}

	test "Si un héroe no tiene suficiente maná, no puede lanzar un hechizo (y no gasta PM)" {
		assert.throwsExceptionWithMessage("El héroe no tiene suficientes PM para lanzar este hechizo", { mickey.lanzarHechizo(ragnarok, umbrio) })
		
		assert.equals(50, umbrio.pv())
		assert.equals(13, mickey.pm())
	}

	test "Si un héroe descansa, sus PM crecen hasta 30" {
		mickey.descansar()

		assert.equals(30, mickey.pm())
		assert.that(mickey.puedeLanzarHechizo(ragnarok))
	}

	test  "Si un héroe con más de 30 PM descansa, conserva sus PM" {
		const gandalf = new Heroe(fuerza = 1, pm = 50, espada = llaveDelReino)
		
		gandalf.descansar()
		
		assert.equals(50, gandalf.pm())
	}

	test "Al cambiar de espada, los héroes causan daño distinto" {
		const examinadora = new LlaveEspada(poderFisico = 1, poderMagico = 10)
		sora.equiparLlaveEspada(examinadora)
		
		sora.lanzarHechizo(piro, rapsodiaAzul)
		
		assert.equals(0, rapsodiaAzul.pv())
	}
}


describe "Equipos" {
  	test "Un equipo necesita frenar si alguno de sus miembros tiene 0 PM" {
		const srCansado = new Heroe(fuerza = 10, pm = 0, espada = brisaDescarada)
		const equipo = new Equipo(miembros = [sora, mickey, riku, srCansado])
		
		assert.that(equipo.necesitanFrenar())
		srCansado.descansar()
		
		assert.notThat(equipo.necesitanFrenar())
  	}

	test "Al emboscar a un monstruo, cada miembro del equipo le realiza un ataque físico" {
		const equipo = new Equipo(miembros = [sora, mickey, riku])
		
		equipo.emboscar(nocturnoRojo)
	
		assert.equals(44, nocturnoRojo.pv())
	}

	test "A ciertos miembros del equipo les conviene cambiar de espada si hacerlo aumentaría la potencia de sus ataques físicos" {
		const equipo = new Equipo(miembros = [sora, mickey, riku])
		
		const aQuienesLesConviene = equipo.aQuienesLesEsUtilCambiarDeEspada(llaveDelReino)

		assert.equals([mickey], aQuienesLesConviene)
	}

	test "Al legar una llave espada a un equipo, el miembro más beneficiado se la queda" {
		const equipo = new Equipo(miembros = [sora, mickey, riku])
		
		equipo.legarLlaveEspada(brisaDescarada)

		assert.equals(brisaDescarada, mickey.espada())
	}

	test "Si a nadie le conviene equipar cierta espada al legarla, no pasa nada" {
		const equipo = new Equipo(miembros = [sora, riku])
		
		equipo.legarLlaveEspada(exploradorEstelar)
		
		assert.notEquals(sora.espada(), exploradorEstelar)
		assert.notEquals(riku.espada(), exploradorEstelar)
	}
}


describe "Otros héroes" {
	test "Ventus ataca físicamente usando el poder mágico de su espada" {
		ventus.atacar(nocturnoRojo)
		
		assert.equals(71, nocturnoRojo.pv())
	}

	test "Ventus lanza hechizos usando el poder físico de su espada" {
		ventus.lanzarHechizo(chispa, nocturnoRojo)
		assert.equals(75, nocturnoRojo.pv())
		assert.equals(6, ventus.pm())
	}

	test "Luego de atacar físicamente 5 veces seguidas, Roxas pasa a modo valiente y hace un 50% más de daño físico" {
		5.times{
			i =>
			roxas.atacar(umbrio)
		}
		assert.equals(45, umbrio.pv())
		assert.equals(valiente, roxas.modo())

		roxas.atacar(umbrio)
		assert.equals(43, umbrio.pv())
	}

	test "Luego de lanzar 5 hechizos seguidos, Roxas pasa a modo sabio y hace un 200% más de daño mágico" {
		5.times{
			i =>
			roxas.lanzarHechizo(chispa, nocturnoRojo)
		}
		assert.equals(55, nocturnoRojo.pv())
		assert.equals(sabio, roxas.modo())

		roxas.lanzarHechizo(chispa, nocturnoRojo)
		assert.equals(40, nocturnoRojo.pv())
	}

	test "Los 5 hechizos seguidos de Roxas para pasar a modo sabio deben haber sido lanzados efectivamente" {
		4.times{
			i =>
			roxas.lanzarHechizo(chispa, nocturnoRojo)
		}
		try {
			roxas.lanzarHechizo(ragnarok, nocturnoRojo)
		} catch e: HechizoException
		
		assert.equals(tranquilo, roxas.modo())
		
		roxas.lanzarHechizo(chispa, nocturnoRojo)
		
		assert.equals(sabio, roxas.modo())
	}

	test "Atacar de una forma reinicia la cuenta del otro tipo de ataque de Roxas" {
		4.times{
			i =>
			roxas.lanzarHechizo(chispa, nocturnoRojo)
		}
		roxas.atacar(nocturnoRojo)
		roxas.lanzarHechizo(chispa, nocturnoRojo)
		
		assert.equals(tranquilo, roxas.modo())
	}
}