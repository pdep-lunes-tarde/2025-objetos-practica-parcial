import tp.*

class Umbrio inherits Incorporeo(defensa = 10, pv = 50, elemento = oscuridad) {}
class NocturnoRojo inherits Sincorazon(pv = 80, elemento = fuego) {}
class RapsodiaAzul inherits Sincorazon(pv = 80, elemento = hielo) {}

const umbrio = new Umbrio()
const nocturnoRojo = new NocturnoRojo()
const rapsodiaAzul = new RapsodiaAzul()

describe "Enemigos y ataques" {
	test "Un incorpóreo recibe daño físico igual a la diferencia entre la potencia del ataque y la defensa del enemigo" {
		const ataqueFisico = new AtaqueFisico(potencia = 20)
		umbrio.recibirAtaque(ataqueFisico)
		assert.equals(umbrio.pv(), 40)
	}

	test "Un ataque físico causa siempre, al menos, 1 de daño" {
		const ataqueFisico = new AtaqueFisico(potencia = 2)
		umbrio.recibirAtaque(ataqueFisico)
		assert.equals(umbrio.pv(), 49)
	}

	test "Un sincorazón recibe daño físico igual al 90% de la potencia del ataque" {
		const ataqueFisico = new AtaqueFisico(potencia = 10)
		nocturnoRojo.recibirAtaque(ataqueFisico)
		assert.equals(nocturnoRojo.pv(), 71)
	}

	test "Un enemigo no recibe daño de un ataque mágico de su mismo elemento " {
		const ataqueMagico = new AtaqueMagico(potencia = 100, elemento = fuego)
		const vidaOriginal = nocturnoRojo.pv()
		nocturnoRojo.recibirAtaque(ataqueMagico)
		assert.equals(nocturnoRojo.pv(), vidaOriginal)
	}

	test "Al ser atacado por un ataque mágico de un elemento neutral, un enemigo recibde daño igual a su potencia" {
		const ataqueMagico = new AtaqueMagico(potencia = 50, elemento = luz)
		nocturnoRojo.recibirAtaque(ataqueMagico)
		assert.equals(nocturnoRojo.pv(), 30)
	}

	test "Al ser atacado por un ataque mágico eficaz, un enemigo recibde daño igual al doble de su potencia" {
		const ataqueMagico = new AtaqueMagico(potencia = 10, elemento = luz)
		umbrio.recibirAtaque(ataqueMagico)
		assert.equals(umbrio.pv(), 30)
	}
}


describe "Héroes" {
  	test "Cuando un héroe ataca a un enemigo, le hace un ataque físico cuya potencia es la fuerza del héroe + el poder de su espada" {
		sora.atacar(umbrio)
		assert.equals(umbrio.pv(), 47)
  	}

	test "Cuando un héroe lanza un hechizo a un enemigo, le hace un ataque mágico cuya potencia es el poder base del hechizo * el poder mágico de su espada y gasta maná igual al poder base" {
		sora.lanzarHechizo(piro, rapsodiaAzul)
		assert.equals(rapsodiaAzul.pv(), 30)
		assert.equals(sora.pm(), 3)
	}

	test "Si un héroe no tiene suficiente maná, no puede lanzar un hechizo (y no gasta PM)" {
		mickey.lanzarHechizo(ragnarok, umbrio)
		assert.equals(umbrio.pv(), 50)
		assert.equals(mickey.pm(), 13)
	}

	test "Si un héroe descansa, sus PM crecen hasta 30" {
		mickey.descansar()
		assert.equals(mickey.pm(), 30)
		assert.that(mickey.puedeLanzarHechizo(ragnarok))
	}

	test  "Si un héroe con más de 30 PM descansa, conserva sus PM" {
		const gandalf = new Heroe(fuerza = 1, pm = 50, espada = llaveDelReino)
		gandalf.descansar()
		assert.equals(gandalf.pm(), 50)
	}

	test "Al cambiar de espada, los héroes causan daño distinto" {
		const examinadora = new LlaveEspada(poderFisico = 1, poderMagico = 10)
		sora.equiparLlaveEspada(examinadora)
		sora.lanzarHechizo(piro, rapsodiaAzul)
		assert.equals(rapsodiaAzul.pv(), 0)
	}
}


describe "Equipos" {
  	test "Un equipo necesita frenar si alguno de sus miembros tiene 0 PM" {
		const srCansado = new Heroe(fuerza = 10, pm = 0, espada = brisaDescarada)
		const equipo = new Equipo(miembros = [sora, mickey, riku, srCansado])
		assert.that(equipo.necesitanFrenar())
		srCansado.descansar()
		assert.notThat(equipo.necesitanFrenar())
  	}

	test "Al emboscar a un monstruo, cada miembro del equipo le realiza un ataque físico" {
		const equipo = new Equipo(miembros = [sora, mickey, riku])
		const otroNocturno = new NocturnoRojo()
		sora.atacar(otroNocturno)
		mickey.atacar(otroNocturno)
		riku.atacar(otroNocturno)

		equipo.emboscar(nocturnoRojo)
		assert.equals(nocturnoRojo.pv(), otroNocturno.pv())
	}

	test "A ciertos miembros del equipo les conviene cambiar de espada si hacerlo aumentaría la potencia de sus ataques físicos" {
		const equipo = new Equipo(miembros = [sora, mickey, riku])
		const aQuienesLesConviene = equipo.aQuienesLesEsUtilCambiarDeEspada(llaveDelReino)

		assert.equals(aQuienesLesConviene, [mickey])
	}

	test "Al legar una llave espada a un equipo, el miembro más beneficiado se la queda" {
		const equipo = new Equipo(miembros = [sora, mickey, riku])
		
		equipo.legarLlaveEspada(brisaDescarada)
		assert.equals(mickey.espada(), brisaDescarada)
	}

	test "Si a nadie le conviene equipar cierta espada al legarla, no pasa nada" {
		const equipo = new Equipo(miembros = [sora, riku])
		
		equipo.legarLlaveEspada(exploradorEstelar)
		assert.notEquals(sora.espada(), exploradorEstelar)
		assert.notEquals(riku.espada(), exploradorEstelar)
	}
}


describe "Otros héroes" {
	test "Ventus ataca físicamente usando el poder mágico de su espada" {
		ventus.atacar(nocturnoRojo)
		assert.equals(nocturnoRojo.pv(), 71)
	}

	test "Ventus lanza hechizos usando el poder físico de su espada" {
		ventus.lanzarHechizo(chispa, nocturnoRojo)
		assert.equals(nocturnoRojo.pv(), 75)
		assert.equals(ventus.pm(), 6)
	}
}